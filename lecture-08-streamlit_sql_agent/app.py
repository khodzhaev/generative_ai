import streamlit as st
import sqlite3
from openai import OpenAI
import os
import json
from dotenv import load_dotenv
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ê–≥–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫
def ask_agent(question):
    messages = [{"role": "user", "content": question}]
    functions = [{
        "name": "query_database",
        "description": "Query the orders database using SQLite SQL. Use SQLite date functions like strftime('%Y-%m', date) for date operations. The orders table has columns: id, order_date, customer_name, amount.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "SQLite query to run on the orders database. Use strftime() for date operations."
                }
            },
            "required": ["query"]
        }
    }]

    # 1. –ü–æ–ª—É—á–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å
    response = client.chat.completions.create(
        model="gpt-4",
        messages=messages,
        functions=functions,
        function_call="auto"
    )

    choice = response.choices[0]

    if choice.finish_reason == "function_call":
        query = json.loads(choice.message.function_call.arguments)["query"]
        result = run_query(query)

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî —Å–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É GPT, –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —ç—Ç–æ —Å–∫–∞–∑–∞—Ç—å
        final_response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –∫–∞–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç."},
                {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å: {question}"},
                {"role": "assistant", "content": f"SQL-–∑–∞–ø—Ä–æ—Å: {query}"},
                {"role": "assistant", "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"}
            ]
        )
        return final_response.choices[0].message.content
    else:
        return choice.message.content

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
def run_query(query):
    conn = sqlite3.connect("../business_data.db")
    cursor = conn.cursor()
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        return result
    except Exception as e:
        return [[str(e)]]
    finally:
        conn.close()

# Streamlit UI
st.title("üß† SQL Agent over Orders DB")
question = st.text_input("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–æ –≤ —è–Ω–≤–∞—Ä–µ 2023?)")

if st.button("–°–ø—Ä–æ—Å–∏—Ç—å"):
    if not question:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
    else:
        response = ask_agent(question)
        st.markdown(f"üìä **–û—Ç–≤–µ—Ç:** {response}")
